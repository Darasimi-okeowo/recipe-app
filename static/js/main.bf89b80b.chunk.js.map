{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","map","ingredient","text","Math","random","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","className","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAiBeA,EAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,gCACI,6BAAKH,IACL,6BACKG,EAAYC,KAAI,SAAAC,GAAU,OACvB,6BAA8BA,EAAWC,MAAjB,IAAfC,KAAKC,eAGtB,4BAAIP,IACJ,qBAAKQ,IAAKP,EAAOQ,IAAI,S,MCoClBC,MA5Cf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,WAPtB,mBAONK,EAPM,KAOCC,EAPD,KAQbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAXf,WAWe,oBAVd,qCASG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,sBAAKG,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAcC,SARhB,SAACC,GACjBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAKR,UACE,uBAAOiB,KAAK,OAAOJ,UAAU,aAAaK,MAAOnB,EAAQoB,SAb1C,SAACJ,GACpBf,EAAUe,EAAEK,OAAOF,UAaf,wBAAQD,KAAK,SAASJ,UAAU,gBAAhC,uBAEF,qBAAKA,UAAU,UAAf,SACGhB,EAAQT,KAAI,SAAAiC,GAAM,OACnB,cAAC,EAAD,CAAiCrC,MAAOqC,EAAOA,OAAOC,MAAOrC,SAAUoC,EAAOA,OAAOpC,SAAUC,MAAOmC,EAAOA,OAAOnC,MAAOC,YAAakC,EAAOA,OAAOlC,aAA1H,IAAfI,KAAKC,mBC7BX+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf89b80b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li key={Math.random() *100}>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img src={image} alt='' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe'\nimport './App.css'\n\nfunction App() {\n  //Autentification keys and id\n  const APP_ID = '20dcfc6b';\n  const APP_KEY = '00d814946ee932bed9fd267a8c31a32e';\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken')\n  useEffect(() => {\n    getRecipes();\n  }, [query]);//this runs anytime query changes \n\n  const getRecipes = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };  \n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n  \n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input type='text' className=\"search-bar\" value={search} onChange={updateSearch}></input>\n        <button type='submit' className=\"search-button\">Search</button>\n      </form>\n      <div className='recipes'>\n        {recipes.map(recipe => (\n        <Recipe key={Math.random() *100} title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}